
<script>
		
		console.log('XmppClient partial loaded');
		var hostname                               = 'localhost';
		var domain                                 = 'siddharth-ravichandrans-macbook-pro.local';
		var bare_jid                               = '<%= current_user.jabber_credential.jabber_id %>';
		var password                               = '<%= current_user.jabber_credential.jabber_password %>';
		var chatroom_domain                        = 'conference.' + domain + '/';
	//	var username                             = bare_jid + '@' + domain;

		console.log('xmpp client connect request posted');
		
		function loginSuccess(){
			alert('Login Successful');
		//	xmpp_client.set_presence('available');
			alert(typeof ROOM_NICK);
		   if(typeof ROOM_NICK != 'undefined'){
				 xmpp_client.join_room(ROOM_NICK, chatroom_domain, bare_jid, 'available', null);
				 initialize_room();					 	 
				 console.log('JOIN ROOM Called');
			}	
		}

		
		
		function loginFailure(){
			console.log('Login Failed');
		}

		function serverConnectSuccess(){
			alert('Server Connection Success');
			$('.presence-status').html('('+ 'Server Connected'+')');
			xmpp_client.login(bare_jid, password, loginSuccess, loginFailure);
			
		}

		function serverConnectFailure(){
			alert('Server Connection Failed');
		}
		

		var xmpp_client                            = new XMPPClient;
		xmpp_client.connect('localhost', 5222);
		
		// xmpp.js api methods
		// view the orbited/protocols/xmpp/xmpp.js file to view the entire list of api methods provided by orbited
		
		xmpp_client.onSocketConnect                = function(){
			$('.presence-status').html('('+ 'On Socket Connected'+')');
			xmpp_client.connectServer(domain, serverConnectSuccess, serverConnectFailure);
			console.log('After COnnect Server is called');	
			xmpp_client.login(bare_jid, password, loginSuccess, loginFailure);	

		}
		
		xmpp_client.onPresence = function(ntype, from) {
			var username  = bare_jid + '@' + domain + '/Orbited'; 
			if(from == username){
				if (ntype == null){
					$('.presence-status').html('(available)');
				}
				else{
					$('.presence-status').html('(' + ntype + ')');
				}
			}				
		}
		
		xmpp_client.onMessage = function(jid, username, text) {
			$('.conversation-box').append('<div class = "user-message shadow"> <b>' + username.split("/")[1] + ' says : </b>' + text + '</div>');
			alert('JID' +  jid.to_s + ' Username ' + username + ' Text' + text);
		}
		
		function leave_groupchat_room(){
			xmpp_client.leave_room();
		}
	
		function groupchat_send_message(message, chatroom_domain){			
			xmpp_client.groupchat_msg(message, chatroom_domain);
		}
		
		// custom method to activate the adminstrator
		//
		function initialize_room(){
			var room_id_info = (window.location.href).split("/");
			var room_id = room_id_info[room_id_info.length - 1];
			var url = "/rooms/" + room_id + "/activate.js";
 						
			$.get(url,null, update_room_roster);
		}
		
		function update_room_roster(response){
			console.log(response);
		}
	
	// Page methods to send message
	$(document).ready(function(){
		//send message button click
		$('.send-message-button').click(function(){
			
			alert('Wats going on');
			var message = $('#message').val();			
		//	xmpp_client.msg('007@conference.' + domain, message);
			xmpp_client.groupchat_msg(message, chatroom_domain);
			return false;
		});
		
		//leave room link click
		
		$('.leave-room-link').click(function(){
			xmpp_client.leave_room();
			var redirection_url = $(this).attr('href');
			alert(redirection_url);
		//	window.location     = redirection_url;
			return false;
		});


	});




	

</script>

